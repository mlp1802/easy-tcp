// Generated by LiveScript 1.5.0
(function(){
  var each, net, carrier, listen, connect, MessageHandler, ClientContainer, Client;
  each = require("prelude-ls").each;
  net = require('net');
  carrier = require('carrier');
  listen = function(port, onConnect){
    var this$ = this;
    return net.createServer(function(socket){
      var client;
      client = new Client(socket);
      onConnect(client);
      socket.on('error', function(){});
      return carrier.carry(socket, function(line){
        return client.handleLine(line);
      });
    }).listen(port);
  };
  connect = function(ip, port, onConnect){
    var socket;
    socket = new net.Socket();
    socket.on('error', function(){});
    return socket.connect(port, ip, function(){
      var client, this$ = this;
      client = new Client(socket);
      onConnect(client);
      return carrier.carry(socket, function(line){
        return client.handleLine(line);
      });
    });
  };
  MessageHandler = (function(){
    MessageHandler.displayName = 'MessageHandler';
    var prototype = MessageHandler.prototype, constructor = MessageHandler;
    function MessageHandler(){
      this.handleLine = bind$(this, 'handleLine', prototype);
      this.handleMessage = bind$(this, 'handleMessage', prototype);
      this.add = bind$(this, 'add', prototype);
      this.handlers = [];
    }
    MessageHandler.prototype.add = function(name, handler){
      return this.handlers[name] = handler;
    };
    MessageHandler.prototype.handleMessage = function(message){
      var call, command, this$ = this;
      call = function(fun, message){
        if (fun.length === 0) {
          fun();
        }
        if (fun.length === 1) {
          return fun(message);
        }
      };
      command = this.handlers[message._name];
      if (command !== void 8) {
        return call(command, message);
      } else {
        return console.log(
        "Unhandled message: " + message);
      }
    };
    MessageHandler.prototype.handleLine = function(line){
      var e;
      try {
        return this.handleMessage(
        JSON.parse(line));
      } catch (e$) {
        e = e$;
        return console.log(e.stack);
      }
    };
    return MessageHandler;
  }());
  ClientContainer = (function(){
    ClientContainer.displayName = 'ClientContainer';
    var prototype = ClientContainer.prototype, constructor = ClientContainer;
    function ClientContainer(){
      this.sendAll = bind$(this, 'sendAll', prototype);
      this.remove = bind$(this, 'remove', prototype);
      this.add = bind$(this, 'add', prototype);
      this.clients = new Map();
    }
    ClientContainer.prototype.add = function(name, client){
      return this.clients.set(name, client);
    };
    ClientContainer.prototype.remove = function(name){
      return this.clients['delete'](name);
    };
    ClientContainer.prototype.each = function(f){
      return this.clients.forEach(f);
    };
    ClientContainer.prototype.sendAll = function(message){
      var this$ = this;
      return this.each(function(c){
        return c.send(message);
      });
    };
    return ClientContainer;
  }());
  Client = (function(){
    Client.displayName = 'Client';
    var prototype = Client.prototype, constructor = Client;
    function Client(socket){
      this.socket = socket;
      this.handleLine = bind$(this, 'handleLine', prototype);
      this.send = bind$(this, 'send', prototype);
      this.messageHandler = new MessageHandler();
    }
    Client.prototype.sendString = function(str){
      return this.socket.write(str);
    };
    Client.prototype.send = function(obj){
      return this.sendString(JSON.stringify(
      obj) + "\n");
    };
    Client.prototype.handleLine = function(line){
      return this.messageHandler.handleLine(line);
    };
    Client.prototype.on = function(name, handler){
      return this.messageHandler.add(name, handler);
    };
    Client.prototype.close = function(){
      return this.socket.destroy();
    };
    return Client;
  }());
  module.exports = {
    ClientContainer: ClientContainer,
    connect: connect,
    listen: listen
  };
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
